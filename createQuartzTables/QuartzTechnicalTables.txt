/ * Orders to delete the tables necessary for the cluster mode of the frequenceur * /
DROP TABLE QRTZ_FIRED_TRIGGERS;
DROP TABLE QRTZ_PAUSED_TRIGGER_GRPS;
DROP TABLE QRTZ_SCHEDULER_STATE;
DROP TABLE QRTZ_LOCKS;
DROP TABLE QRTZ_SIMPLE_TRIGGERS;
DROP TABLE QRTZ_SIMPROP_TRIGGERS;
DROP TABLE QRTZ_CRON_TRIGGERS;
DROP TABLE QRTZ_TRIGGERS;
DROP TABLE QRTZ_JOB_DETAILS;
DROP TABLE QRTZ_CALENDARS;
DROP TABLE QRTZ_BLOB_TRIGGERS;

/ * Table to store detailed information for each configured job * /
CREATE TABLE QRTZ_JOB_DETAILS
	(
		SCHED_NAME VARCHAR(120) NOT NULL,
		JOB_NAME VARCHAR(80) NOT NULL,
		JOB_GROUP VARCHAR(80) NOT NULL,
		DESCRIPTION VARCHAR(120),
		JOB_CLASS_NAME VARCHAR(128) NOT NULL,
		IS_DURABLE INTEGER NOT NULL,
		IS_NONCONCURRENT INTEGER NOT NULL,
		IS_UPDATE_DATA INTEGER NOT NULL,
		REQUESTS_RECOVERY INTEGER NOT NULL,
		JOB_DATA BLOB(2000),
		PRIMARY KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)
	);

/ * Table to store trigger information configured * /
CREATE TABLE QRTZ_TRIGGERS
	(
		SCHED_NAME VARCHAR(120) NOT NULL,
		TRIGGER_NAME VARCHAR(80) NOT NULL,
		TRIGGER_GROUP VARCHAR(80) NOT NULL,
		JOB_NAME VARCHAR(80) NOT NULL,
		JOB_GROUP VARCHAR(80) NOT NULL,
		DESCRIPTION VARCHAR(120),
		NEXT_FIRE_TIME BIGINT,
		PREV_FIRE_TIME BIGINT,
		PRIORITY INTEGER,
		TRIGGER_STATE VARCHAR(16) NOT NULL,
		TRIGGER_TYPE VARCHAR(8) NOT NULL,
		START_TIME BIGINT NOT NULL,
		END_TIME BIGINT,
		CALENDAR_NAME VARCHAR(80),
		MISFIRE_INSTR SMALLINT,
		JOB_DATA BLOB(2000),
		PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
		FOREIGN KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)
		REFERENCES QRTZ_JOB_DETAILS(SCHED_NAME,JOB_NAME,JOB_GROUP)
	);

/ * Table to store unit triggers including repetitions intervals * /
CREATE TABLE QRTZ_SIMPLE_TRIGGERS
	(
		SCHED_NAME VARCHAR(120) NOT NULL,
		TRIGGER_NAME VARCHAR(80) NOT NULL,
		TRIGGER_GROUP VARCHAR(80) NOT NULL,
		REPEAT_COUNT BIGINT NOT NULL,
		REPEAT_INTERVAL BIGINT NOT NULL,
		TIMES_TRIGGERED BIGINT NOT NULL,
		PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
		FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
		REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
	);

/ * Table to store the cron trigger, including cron expressions and time zone information * /
CREATE TABLE QRTZ_CRON_TRIGGERS
	(
		SCHED_NAME VARCHAR(120) NOT NULL,
		TRIGGER_NAME VARCHAR(80) NOT NULL,
		TRIGGER_GROUP VARCHAR(80) NOT NULL,
		CRON_EXPRESSION VARCHAR(120) NOT NULL,
		TIME_ZONE_ID VARCHAR(80),
		PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
		FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
		REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
	);

/ * Table to store the properties of tiggers * /
CREATE TABLE QRTZ_SIMPROP_TRIGGERS
	(
		SCHED_NAME VARCHAR(120) NOT NULL,
		TRIGGER_NAME VARCHAR(200) NOT NULL,
		TRIGGER_GROUP VARCHAR(200) NOT NULL,
		STR_PROP_1 VARCHAR(512),
		STR_PROP_2 VARCHAR(512),
		STR_PROP_3 VARCHAR(512),
		INT_PROP_1 INT,
		INT_PROP_2 INT,
		LONG_PROP_1 BIGINT,
		LONG_PROP_2 BIGINT,
		DEC_PROP_1 NUMERIC(13,4),
		DEC_PROP_2 NUMERIC(13,4),
		BOOL_PROP_1 VARCHAR(1),
		BOOL_PROP_2 VARCHAR(1),
		PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
		FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP) 
		REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
	);

/ * Table to store the trigger as a blob type * /
CREATE TABLE QRTZ_BLOB_TRIGGERS
	(
		SCHED_NAME VARCHAR(120) NOT NULL,
		TRIGGER_NAME VARCHAR(80) NOT NULL,
		TRIGGER_GROUP VARCHAR(80) NOT NULL,
		BLOB_DATA BLOB(2000),
		PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
		FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
		REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
	);

/ * Table to store Quartz calendar information * /
CREATE TABLE QRTZ_CALENDARS
	(
		SCHED_NAME VARCHAR(120) NOT NULL,
		CALENDAR_NAME VARCHAR(80) NOT NULL,
		CALENDAR BLOB(2000) NOT NULL,
		PRIMARY KEY (CALENDAR_NAME)
	);

/ * Table to store the state and execution information of triggers * /
CREATE TABLE QRTZ_FIRED_TRIGGERS
	(
		SCHED_NAME VARCHAR(120) NOT NULL,
		ENTRY_ID VARCHAR(95) NOT NULL,
		TRIGGER_NAME VARCHAR(80) NOT NULL,
		TRIGGER_GROUP VARCHAR(80) NOT NULL,
		INSTANCE_NAME VARCHAR(80) NOT NULL,
		FIRED_TIME BIGINT NOT NULL,
		SCHED_TIME BIGINT NOT NULL,
		PRIORITY INTEGER NOT NULL,
		STATE VARCHAR(16) NOT NULL,
		JOB_NAME VARCHAR(80),
		JOB_GROUP VARCHAR(80),
		IS_NONCONCURRENT INTEGER,
		REQUESTS_RECOVERY INTEGER,
		PRIMARY KEY (SCHED_NAME,ENTRY_ID)
	);

/ * Table to store trigger groups in pause * /
CREATE TABLE QRTZ_PAUSED_TRIGGER_GRPS
	(
		SCHED_NAME VARCHAR(120) NOT NULL,
		TRIGGER_GROUP VARCHAR(80) NOT NULL,
		PRIMARY KEY (SCHED_NAME,TRIGGER_GROUP)
	);

/ * Table to store the states of schedules * /
CREATE TABLE QRTZ_SCHEDULER_STATE
	(
		SCHED_NAME VARCHAR(120) NOT NULL,
		INSTANCE_NAME VARCHAR(80) NOT NULL,
		LAST_CHECKIN_TIME BIGINT NOT NULL,
		CHECKIN_INTERVAL BIGINT NOT NULL,
		PRIMARY KEY (SCHED_NAME,INSTANCE_NAME)
	);

/ * Table to store triggers locks * /
CREATE TABLE QRTZ_LOCKS
	(
		SCHED_NAME VARCHAR(120) NOT NULL,
		LOCK_NAME VARCHAR(40) NOT NULL,
		PRIMARY KEY (SCHED_NAME,LOCK_NAME)
	);
